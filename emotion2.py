# -*- coding: utf-8 -*-
"""
Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16zrKBYsYvehIE7sTYdX5_80MJaIFkL0H
"""

pip install google-cloud-language

from google.cloud import language_v1
import pandas as pd

from google.colab import drive
drive.mount('/content/drive')

import os

# 구글 감정분석 API
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = ""

import os
from google.cloud import language_v1
import pandas as pd
import time

#긍정/부정/정의할수없음 3단계로 구분
def analyze_sentiment(text_content, client):
    type_ = language_v1.Document.Type.PLAIN_TEXT
    language = "ko"
    document = {"content": text_content, "type": type_, "language": language}

    response = client.analyze_sentiment(request={'document': document})

    sentiment = response.document_sentiment
    score = sentiment.score
    magnitude = sentiment.magnitude

    if score >= 0.2:
        sentiment_label = "positive"
    elif score <= -0.2:
        sentiment_label = "negative"
    else:
        sentiment_label = "hard to define"

    return sentiment_label, score

def process_csv_chunk(chunk, client):
    chunk['sentiment'], chunk['score'] = zip(*chunk['댓글 내용'].apply(lambda x: analyze_sentiment(x, client)))
    return chunk

def process_csv(input_file, output_file):
    client = language_v1.LanguageServiceClient()

    # API 할당량 때문에 300개씩 끊어서 진행 
    chunk_size = 300
    for i, df_chunk in enumerate(pd.read_csv(input_file, encoding="utf-8", chunksize=chunk_size)):
        processed_chunk = process_csv_chunk(df_chunk, client)

        processed_chunk.to_csv(output_file, mode='a', header=not os.path.exists(output_file), index=False, encoding="utf-8-sig")
        print(processed_chunk)

        # API 할당량 때문에 딜레이 주기
        if i < (3000 // chunk_size) - 1:
            print(f"딜레이...")
            time.sleep(40)

input_csv = "/content/drive/MyDrive/bigdata/youtube_21_2/combined_data2.csv"  # Replace this with your input CSV file
output_csv = "/content/drive/MyDrive/bigdata//youtube_21_2/combined_data2_2.csv"  # Replace this with the desired output CSV file

process_csv(input_csv, output_csv)